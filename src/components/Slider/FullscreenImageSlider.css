/* FullscreenImageSlider.css */

.fullscreen-slider-container {
  position: relative; /* Ou fixed, se precisar sobrepor outros elementos da página inteira */
  /* display: flex; /* Comentado - pode não ser necessário se o Slider preenche o container */
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh; /* Altura definida para o slider (ex: abaixo de um header) */
  overflow: hidden;
  background-color: transparent;
}

.slide {
  width: 100%; /* Ocupa 100% da largura do seu pai (geralmente .slick-track) */
  height: 100%; /* Ocupa 100% da altura do seu pai (geralmente .slick-list, que terá 90vh) */
  position: relative; /* Para posicionamento de elementos filhos como o overlay de texto */
}

.slide img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Ajustes para o react-slick */
.slick-slider,
.slick-list {
  height: 100% !important; /* Ocupa 100% da altura do .fullscreen-slider-container */
  width: 100% !important; /* Ocupa 100% da largura do .fullscreen-slider-container */
}

/* .slick-track: Deixe o react-slick gerenciar as dimensões do .slick-track.
   Remova quaisquer declarações de width/height forçadas daqui. */

.slick-slide > div {
  /* Wrapper direto do react-slick em volta do seu .slide */
  height: 100%; /* Ocupa 100% da altura do .slick-slide (que será a altura do .slick-list) */
  width: 100%; /* Ocupa 100% da largura */
}

/* Barras de Progresso */
.progress-bars-container {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 10; /* Acima dos slides e do texto de sobreposição */
}

.progress-bar {
  width: 60px;
  height: 6px;
  background-color: var(--background-color-translucent);
  border-radius: 3px;
  cursor: pointer;
  overflow: hidden;
}

.progress-bar-inner {
  height: 100%;
  width: 0%;
  background-color: var(--text-color);
  border-radius: 3px;
}

@keyframes progressBarAnimation {
  from {
    width: 0%;
  }
  to {
    width: 100%;
  }
}

/* Texto de Sobreposição e Glassmorphism */
.slide-text-overlay {
  position: absolute;
  top: 50%;
  left: 60px; /* Posição final à esquerda */
  transform: translateY(-50%); /* Mantém o centramento vertical */
  padding: 25px 40px;
  color: var(--text-color);
  text-align: left;
  z-index: 5;
  max-width: 50%;
  font-size: 1.8rem;
  font-weight: bold;
  text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.3);
  opacity: 0; /* Começa invisível */
  pointer-events: none;
}

.glassmorphism {
  background: var(--background-color-translucent);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border-radius: 15px;
  border: 1px solid var(--border-color);
  box-shadow: var(--box-shadow);
}

/* Animações para o Texto - HORIZONTAL */
@keyframes textEnterAnimation {
  from {
    opacity: 0;
    /* Começa à esquerda da sua posição final (left: 60px) e mantém o translateY para centramento vertical */
    transform: translateX(-100%) translateY(-50%);
  }
  to {
    opacity: 1;
    /* Termina na sua posição final (left: 60px) e centrado verticalmente */
    transform: translateX(0) translateY(-50%);
  }
}

@keyframes textExitAnimation {
  from {
    opacity: 1;
    transform: translateX(0) translateY(-50%);
  }
  to {
    opacity: 0;
    /* Sai para a direita da sua posição final e mantém o translateY */
    transform: translateX(100%) translateY(-50%);
  }
}

.slide-text-overlay.animate-enter {
  animation: textEnterAnimation 0.7s forwards
    cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.slide-text-overlay.animate-exit {
  animation: textExitAnimation 0.7s forwards
    cubic-bezier(0.55, 0.085, 0.68, 0.53);
}
